{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7fc45d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\r\n//props can be used but ES6 technique is used to break properties\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"}  ${isRed && \"infoBox--red\"\r\n    }`}\r\n        >\r\n            <CardContent>\r\n                  <Typography className=\"infoBox__title\" color=\"textSecondary\" >\r\n                      {title}\r\n                  </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                 <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                 </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 400,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 600,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 1000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1));  \r\n};\r\n\r\nexport const prettyPrintStat = (stat) => \r\nstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\" ) => \r\n    data.map((country) => (\r\n        <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius={\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\"\r\n                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    ></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div> \r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));\r\n\r\n","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { MapContainer as LeafletMap, TileLayer , } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\n\r\n//attribution for credit to creators\r\nfunction Map({ countries ,casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                url= \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">Open Street Map</a> contributors'\r\n                    />  \r\n                    {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\n//Map through countries list and return the following items\r\n//destructuring is done in line 8 itself or could be done in td with props change\r\nfunction Table({ countries}) {\r\n    return (\r\n    <div className=\"table\">\r\n        \r\n        {countries.map(({country, cases}) => (\r\n         \r\n         <tr>\r\n             <td>{country}</td>\r\n             <td>\r\n                 <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n            </td>\r\n         </tr>\r\n\r\n        ))}\r\n    </div>\r\n    ); \r\n}\r\n\r\nexport default Table;\r\n","import React ,{ useState,useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display:false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type:\"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    //include dollar sign in ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\n\r\n // https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n const buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n  \r\n    for(let date in data.cases) {\r\n        if(lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,  //to get fresh number of cases each day\r\n            };\r\n          chartData.push(newDataPoint);  \r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType=\"cases\", ...props}) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n       await  fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then(response => {\r\n             return response.json();\r\n        })\r\n        .then(data => {\r\n        let chartData = buildChartData(data, casesType);\r\n        setData(chartData);\r\n        console.log(chartData);\r\n        \r\n        // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n    }, [casesType]);\r\n     \r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n         <Line \r\n         \r\n         data = {{\r\n             datasets: [\r\n                 {\r\n                     backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                     borderColor: \"#CC1034\",\r\n                     data: data,\r\n                 },\r\n             ],\r\n         }}\r\n         options={options}\r\n         />  \r\n        )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from \"react\";\nimport { MenuItem,FormControl,Select, Card, CardContent} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\n\n\n//https://disease.sh/v3/covid-19/countries \n   //USEFFECT = Runs a piece of code,takes empty function\n   //based on a given condition\n  //if no variable inside array here,it will run once once when component loads and not again..useEffect\n   //async --> send a request,wait for it,do something with it\n    //STATE = how to write a variable in REACT <<<<<<<\n    //change in array value can re-fire the code\n\nfunction  App ()  {\n   const [countries,setCountries] = useState([]); \n   const [country, setCountry] = useState(\"worldwide\");\n   const [countryInfo, setCountryInfo] = useState({});\n   const [tableData, setTableData] = useState([]);\n   const [mapCenter, setMapCenter] =\n   useState({ lat: 34.80746, lng: -40.4796});\n   const [mapZoom, setMapZoom] = useState(3);\n   const [mapCountries, setMapCountries] = useState([]);\n   const [casesType, setCasesType] = useState(\"cases\");\n    // WORLDWIDE keep track of what we selected..default will be selected and changing country\n     //wont take effect and so listen function needs to be used\n   useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n        setCountryInfo(data);\n    });\n   }, []);\n\n\n\n  useEffect(() => {                          \n      const getCountriesData = async () => {\n       await fetch(\"https://disease.sh/v3/covid-19/countries\")           \n       .then((response) => response.json())\n       .then((data) => {\n        const countries = data.map((country) => ({\n            name: country.country,       //United States,India\n            value: country.countryInfo.iso2   //UK,USA,FR\n          }));\n\n          const sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n       });\n     };\n\n     getCountriesData();\n   }, []);\n   //listening function\n\n   const onCountryChange = async (event) => {\n     const countryCode = event.target.value;\n     //setCountry(countryCode);\n\n     const url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : \n     `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n     await fetch(url)\n     .then((response) => response.json())\n     .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n      //all of the data...from the country response \n     });\n   };\n\n  // console.log(\"COUNTRY INFO >>>\", countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n      <h1>COVID-19 TRACKER</h1>\n      <FormControl className=\"app__dropdown\">   {/*bem naming convention...app represents file and dropdown the component used*/}\n      <Select variant=\"outlined\"   value={country} onChange={onCountryChange}  >\n        {/* Loop through all the countries and show a dropdown list of all the options\n        Using state ,kind of short term memory for react*/}\n        <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n        {countries.map((country) =>  (              //Map is essentially like an array..similar to for each..but returns the trans-\n          <MenuItem value={country.value}>{country.name}</MenuItem> //formed array //mapping through countries and pop out value&name\n        ))}\n      </Select>\n      </FormControl> \n      </div>       \n       \n        <div className=\"app__stats\">\n          <InfoBox\n          isRed\n          active={casesType === \"cases\"}\n          onClick={(e) => setCasesType(\"cases\")}\n          title=\"Coronavirus-cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox\n          active={casesType === \"recovered\"}\n          onClick={(e) => setCasesType(\"recovered\")}\n          title=\"Recovered\"\n          cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox \n          isRed\n          active={casesType === \"deaths\"}\n          onClick={(e) => setCasesType(\"deaths\")}\n          title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n\n       <Map \n       casesType={casesType} \n       countries ={mapCountries} \n       center = {mapCenter}\n        zoom = {mapZoom}\n         />         {/* rendering map element */}\n    </div>\n    <Card className=\"app__right\">\n      <CardContent>\n        <h3>Live Cases By Country</h3>\n       <Table countries={tableData} />\n       <h3 className=\"app__graphTitle\"> Worldwide new {casesType}</h3>\n       <LineGraph className=\"app__graph\" casesType={casesType} />\n      </CardContent>\n    </Card>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}